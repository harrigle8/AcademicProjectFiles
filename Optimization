//demonstrates using python to solve optimization problems. These were about interpreting shadow prices. 

import cvxpy as cp

#x = cp.Variable(2, nonneg = True)
x = cp.Variable(2)

obj_func = 3*x[0]+2*x[1]

constraints = []
constraints.append(1*x[0]+2*x[1]<=11) 
constraints.append(1*x[0]+(-3)*x[1]<=1)  
constraints.append(x[0]>=0)
constraints.append(x[1]>=0)


problem = cp.Problem(cp.Maximize(obj_func), constraints)

problem.solve(solver=cp.GUROBI, verbose = False)
#problem.solve()

print("obj_func =", obj_func.value)
print("x =", x.value)

# Shadow prices or dual prices
print("optimal (1*x[0]+2*x[1]<=11) dual variable", constraints[0].dual_value)
print("optimal (1*x[0]+(-3)*x[1]<=1) dual variable", constraints[1].dual_value)

//Problem 2
import cvxpy as cp

#x = cp.Variable(2, nonneg = True)
x = cp.Variable(2)

obj_func = 3*x[0]+2*x[1]

constraints = []
constraints.append(1*x[0]+2*x[1]<=11) 
constraints.append(1*x[0]+(-3)*x[1]<=1)  
constraints.append(x[0]>=0)
constraints.append(x[1]>=0)


problem = cp.Problem(cp.Maximize(obj_func), constraints)

problem.solve(solver=cp.GUROBI, verbose = False)
#problem.solve()

print("obj_func =", obj_func.value)
print("x =", x.value)

# Shadow prices or dual prices
print("optimal (1*x[0]+2*x[1]<=11) dual variable", constraints[0].dual_value)
print("optimal (1*x[0]+(-3)*x[1]<=1) dual variable", constraints[1].dual_value)

# Reduced costs
print("reduced cost of the 1st primal variable x[0]", constraints[2].dual_value)
print("reduced cost of the 2nd primal variable x[1]", constraints[3].dual_value)

# Reduced costs
print("reduced cost of the 1st primal variable x[0]", constraints[2].dual_value)
print("reduced cost of the 2nd primal variable x[1]", constraints[3].dual_value)
